name: Supply Chain Security Guard (Production)

# This is a production-ready version with proper permissions and strict enforcement
# Copy this to your production repository and configure proper permissions

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master ]
  workflow_dispatch:

# Required permissions for full functionality
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  supply-chain-guard:
    name: Supply Chain Security Enforcement
    runs-on: ubuntu-latest

    steps:
      # CRITICAL: Harden-Runner must be the FIRST step in every job
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: block  # STRICT blocking in production
          disable-sudo: true
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            uploads.github.com:443
            objects.githubusercontent.com:443
            registry.npmjs.org:443
            registry.yarnpkg.com:443
            ghcr.io:443
            docker.io:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
            pypi.org:443
            files.pythonhosted.org:443
            index.docker.io:443

      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      # Verify egress controls are working (production test)
      - name: Verify Egress Block (Production)
        run: |
          echo "üîí Testing production egress blocking..."
          set -e

          # Test that blocked endpoints fail (should NOT be reachable)
          echo "Testing blocked endpoint (httpbin.org)..."
          if curl -fsS --max-time 5 http://httpbin.org/get > /dev/null 2>&1; then
            echo "‚ùå SECURITY RISK: Egress not properly blocked! httpbin.org is reachable."
            echo "This indicates network security controls are not working."
            exit 1
          else
            echo "‚úÖ Egress blocking verified: Non-whitelisted endpoints properly blocked"
          fi

          # Test that allowed endpoints work
          echo "Testing allowed endpoint (github.com)..."
          if curl -fsS --max-time 10 https://github.com > /dev/null; then
            echo "‚úÖ Allowed endpoint accessible: github.com reachable"
          else
            echo "‚ùå ERROR: Allowed endpoint not reachable - check network configuration"
            exit 1
          fi

      # Dependency vulnerability scanning with strict enforcement
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@7c2007bcb556501da015201bcba5aa14069b74e2 # v0.23.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'  # FAIL on vulnerabilities in production
          ignore-unfixed: true

      # Generate SARIF report for security tab
      - name: Generate Trivy SARIF Report
        uses: aquasecurity/trivy-action@7c2007bcb556501da015201bcba5aa14069b74e2 # v0.23.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'  # Don't fail twice, just generate report
          ignore-unfixed: true

      # Upload results to GitHub Security tab
      - name: Upload Trivy Results to Security Tab
        uses: github/codeql-action/upload-sarif@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Node.js package hygiene (if applicable)
      - name: Node Package Security Check
        if: hashFiles('package.json') != ''
        run: |
          echo "üì¶ Node.js repository detected"
          echo "Installing packages without lifecycle scripts..."

          # Install dependencies without running potentially malicious scripts
          if [ -f package-lock.json ]; then
            echo "Using npm ci --ignore-scripts..."
            npm ci --ignore-scripts
          elif [ -f yarn.lock ]; then
            echo "Using yarn install --ignore-scripts..."
            yarn install --ignore-scripts
          else
            echo "Using npm install --ignore-scripts..."
            npm install --ignore-scripts
          fi

          echo "‚úÖ Package installation completed safely without scripts"

      # Python package hygiene (if applicable)
      - name: Python Package Security Check
        if: hashFiles('requirements.txt', 'pyproject.toml', 'setup.py') != ''
        run: |
          echo "üêç Python repository detected"
          echo "Checking for suspicious package patterns..."

          # Check for typosquatting patterns in requirements
          if [ -f requirements.txt ]; then
            echo "Scanning requirements.txt for suspicious patterns..."
            # Look for common typosquatting patterns
            if grep -iE "(colorsama|urllib3|requests)" requirements.txt; then
              echo "‚ö†Ô∏è  Found packages that could be typosquats - manual review recommended"
            fi
          fi

          echo "‚úÖ Python package check completed"

  # Job for self-hosted runner specific checks (production)
  runner-security-check:
    name: Runner Security Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: block  # Block mode for production
          disable-sudo: true

      - name: Production Runner Environment Check
        run: |
          echo "üîç Analyzing production runner environment..."
          echo "Runner OS: $(uname -a)"
          echo "Runner User: $(whoami)"
          echo "Runner Groups: $(groups)"
          echo "Docker Access: $(docker --version 2>/dev/null || echo 'Not available')"
          echo "Sudo Access: $(sudo -n true 2>/dev/null && echo 'Available - SECURITY RISK!' || echo 'Restricted - Good')"

          # Security validation
          if sudo -n true 2>/dev/null; then
            echo "‚ùå SECURITY RISK: Runner has sudo access without password!"
            echo "This violates security best practices for CI/CD runners."
            exit 1
          fi

          # Check for security indicators
          echo "üîí Security indicators:"
          echo "- Running as: $(id)"
          echo "- Home directory: $HOME"
          echo "- Working directory: $(pwd)"

          # Verify StepSecurity monitoring is active
          echo "‚úÖ StepSecurity Harden-Runner production monitoring active"